<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" >
<generatorConfiguration>
	<!-- mybatis generator配置 -->
	<properties resource="mybatis_generator/generator.properties" />
	<context id="Tables" targetRuntime="MyBatis3" defaultModelType="flat">
		<!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表； 一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 -->
		<property name="autoDelimitKeywords" value="false" />
		<!-- 生成的Java文件的编码 -->
		<property name="javaFileEncoding" value="UTF-8" />
		<!-- 格式化java代码 -->
		<property name="javaFormatter"
			value="org.mybatis.generator.api.dom.DefaultJavaFormatter" />
		<!-- 格式化XML代码 -->
		<property name="xmlFormatter"
			value="org.mybatis.generator.api.dom.DefaultXmlFormatter" />
		<property name="mergeable" value="false" />

		<!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
		<property name="beginningDelimiter" value="`" />
		<property name="endingDelimiter" value="`" />

		<!-- 这里引入扩展插件 -->
		<!--<plugin type="${mapper.plugin}" />-->

		<!-- 设置自定义注释 -->
		<!--<commentGenerator type="${mapper.comment}">
			&lt;!&ndash; 是否去除自动生成的注释 true：是 ： false:否 &ndash;&gt;
			<property name="suppressAllComments" value="false" />
			<property name="suppressDate" value="true" />
			<property name="useActualColumnNames" value="true" />
		</commentGenerator>-->

		<!-- 数据库配置 -->
		<jdbcConnection driverClass="${generator.driver}"
			connectionURL="${generator.url}" userId="${generator.username}"
			password="${generator.password}">
		</jdbcConnection>

		<!-- java类型处理器 用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl； 注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 
			NUMERIC数据类型； -->
		<javaTypeResolver
			type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
			<!-- true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型 false：默认, scale>0;length>18：使用BigDecimal; 
				scale=0;length[10,18]：使用Long； scale=0;length[5,9]：使用Integer； scale=0;length<5：使用Short； -->
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>


		<!-- java模型创建器，是必须要的元素 负责：1，key类（见context的defaultModelType）；2，java类；3，查询类 
			targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制； targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录 -->
		<javaModelGenerator targetPackage="${generator.targetModelPackage}"
			targetProject="${generator.targetJavaProject}">
			<property name="enableSubPackages" value="true" />
			<property name="trimStrings" value="true" />
			<property name="javaFormatter" value="true" />
		</javaModelGenerator>
		<!-- 生成SQL map的XML文件生成器， 注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口）， 
			或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置 
			targetPackage/targetProject:同javaModelGenerator -->
		<sqlMapGenerator targetPackage="${generator.targetXMLPackage}"
			targetProject="${generator.targetResourcesProject}">
			<property name="enableSubPackages" value="true" />
		</sqlMapGenerator>
		<!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 targetPackage/targetProject:同javaModelGenerator 
			type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）： 1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML； 
			2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中； 3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML； 
			注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER -->
		<javaClientGenerator type="XMLMAPPER"
			targetPackage="${generator.targetMapperPackage}" targetProject="${generator.targetJavaProject}">
			<property name="enableSubPackages" value="true" />
			<property name="javaFormatter" value="true" />
		</javaClientGenerator>

		<!-- 全部表生成 -->
		<!-- <table tableName="%" > <generatedKey column="id" sqlStatement="Mysql" 
			identity="true"/> </table> -->

		<!-- 部分表生成 -->
		<table tableName="tbl_group" domainObjectName="Group"
			enableCountByExample="false" enableUpdateByExample="false"
			enableDeleteByExample="false" enableSelectByExample="false"
			selectByExampleQueryId="false">
			<generatedKey column="id" sqlStatement="Mysql" identity="true" />
		</table>
	</context>
</generatorConfiguration>